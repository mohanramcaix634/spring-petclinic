name: Java CI with Maven
on:
  push:
    branches: [ main ]
env:
  REGISTRY: mohanram634.jfrog.io
  
jobs:
  Junit-Test:
    runs-on: self-hosted
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v2
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven
      - name: Junit Test
        run: ./mvnw test
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/target/surefire-reports/TEST-*.xml'
      - name: Jacoco Code Coverage
        run: ./mvnw jacoco:report
  Sonar-qube:
    needs: [Junit-Test]
    runs-on: self-hosted
    steps: 
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'
          cache: maven
      - name: Sonarqube Analysis
        run: |
          ./mvnw sonar:sonar -Dsonar.projectKey=Petclinic-Spring -Dsonar.organization=mohanramcaix634 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.projectName=Petclinic-Spring
  
  Sca-Analysis:
    needs: [Sonar-qube]
    runs-on: self-hosted
    steps:
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/maven@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        
    - name: remove root files
      run: 'pwd'
        
  Docker-Build:
    needs: [Sca-Analysis]
    runs-on: self-hosted
    steps:
    - name: build the docker image
      run: docker build . -t ${{ env.REGISTRY }}/javarepo-docker-local/springboot:$GITHUB_RUN_NUMBER
    - name: docker login
      run: docker login -u admin -p ${{ secrets.JFROG_PASSORD }} ${{ env.REGISTRY }}
    - name: docker push
      run: docker push ${{ env.REGISTRY }}/javarepo-docker-local/springboot:$GITHUB_RUN_NUMBER
  Scan-Docker-image:
    needs: [Docker-Build]
    runs-on: self-hosted
    steps:
     - name: Run Trivy vulnerability scanner in fs mode
       uses: aquasecurity/trivy-action@master
       with:
         image-ref: 'mohanram634.jfrog.io/javarepo-docker-local/springboot:40'
         format: 'sarif'
         output: 'trivy-results.sarif'
     - name: Upload Trivy scan results to GitHub Security tab
       uses: github/codeql-action/upload-sarif@v2
       with:
        sarif_file: 'trivy-results.sarif'
 
